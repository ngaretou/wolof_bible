import 'package:snowball_stemmer/snowball_stemmer.dart';

class TextProcessor {
  final SnowballStemmer? stemmer;
  final Set<String> stopWords;

  TextProcessor(String language)
      : stemmer = _getStemmer(language),
        stopWords = _getStopWords(language);

  static SnowballStemmer? _getStemmer(String lang) {
    if (lang == 'en') return SnowballStemmer(Algorithm.english);
    if (lang == 'fr') return SnowballStemmer(Algorithm.french);
    return null;
  }

  static Set<String> _getStopWords(String lang) {
    if (lang == 'en') return enStopWords;
    if (lang == 'fr') return frStopWords;
    return <String>{};
  }

  List<String> process(String text) {
    final tokens =
        text.toLowerCase().split(RegExp(r'[^\p{L}\p{N}]+', unicode: true));
    final processedTokens = <String>[];
    for (var token in tokens) {
      if (token.isEmpty || stopWords.contains(token)) continue;
      final processedToken = stemmer?.stem(token) ?? token;
      if (processedToken.isNotEmpty) {
        processedTokens.add(processedToken);
      }
    }
    return processedTokens;
  }
}

// NOTE: These stop word lists and the stemmer logic should be kept
// in sync with the ones used in the `sfm_parser/bin/stopwords.dart` file.

const enStopWords = {
  'a',
  'an',
  'the',
  'and',
  'but',
  'if',
  'or',
  'because',
  'as',
  'what',
  'when',
  'where',
  'how',
  'which',
  'who',
  'whom',
  'this',
  'that',
  'these',
  'those',
  'is',
  'am',
  'are',
  'was',
  'were',
  'be',
  'been',
  'being',
  'have',
  'has',
  'had',
  'do',
  'does',
  'did',
  'in',
  'on',
  'at',
  'for',
  'with',
  'about',
  'against',
  'between',
  'into',
  'through',
  'during',
  'before',
  'after',
  'above',
  'below',
  'to',
  'from',
  'up',
  'down',
  'out',
  'off',
  'over',
  'under',
  'again',
  'further',
  'then',
  'once',
  'here',
  'there',
  'all',
  'any',
  'both',
  'each',
  'few',
  'more',
  'most',
  'other',
  'some',
  'such',
  'no',
  'nor',
  'not',
  'only',
  'own',
  'same',
  'so',
  'than',
  'too',
  'very',
  's',
  't',
  'can',
  'will',
  'just',
  'don',
  'should',
  'now'
};
const frStopWords = {
  'au',
  'aux',
  'avec',
  'ce',
  'ces',
  'dans',
  'de',
  'des',
  'du',
  'elle',
  'en',
  'et',
  'eux',
  'il',
  'je',
  'la',
  'le',
  'leur',
  'lui',
  'ma',
  'mais',
  'me',
  'même',
  'mes',
  'moi',
  'mon',
  'ne',
  'nos',
  'notre',
  'nous',
  'on',
  'ou',
  'par',
  'pas',
  'pour',
  'qu',
  'que',
  'qui',
  'sa',
  'se',
  'ses',
  'son',
  'sur',
  'ta',
  'te',
  'tes',
  'toi',
  'ton',
  'tu',
  'un',
  'une',
  'vos',
  'votre',
  'vous',
  'c',
  'd',
  'j',
  'l',
  'à',
  'm',
  'n',
  's',
  't',
  'y',
  'été',
  'étée',
  'étées',
  'étés',
  'étant',
  'suis',
  'es',
  'est',
  'sommes',
  'êtes',
  'sont',
  'serai',
  'seras',
  'sera',
  'serons',
  'serez',
  'seront',
  'aurais',
  'aura',
  'aurons',
  'aurez',
  'auront',
  'avais',
  'avait',
  'avions',
  'aviez',
  'avaient',
  'eut',
  'eûmes',
  'eûtes',
  'eurent',
  'ai',
  'as',
  'avons',
  'avez',
  'ont',
  'aurai',
  'auras'
};
